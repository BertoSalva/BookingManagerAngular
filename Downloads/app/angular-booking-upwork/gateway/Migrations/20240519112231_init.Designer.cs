// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gateway;

#nullable disable

namespace gateway.Migrations
{
    [DbContext(typeof(BookingDbContext))]
    [Migration("20240519112231_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("gateway.AvailableSlot", b =>
                {
                    b.Property<int>("AvailableSlotID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailableSlotID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("PsychologistID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("AvailableSlotID");

                    b.HasIndex("PsychologistID");

                    b.ToTable("AvailableSlot");
                });

            modelBuilder.Entity("gateway.BookingRequest", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestID"));

                    b.Property<int>("ChildID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PreferredDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("PreferredTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestID");

                    b.HasIndex("ChildID");

                    b.HasIndex("ParentID");

                    b.ToTable("BookingRequest");
                });

            modelBuilder.Entity("gateway.Child", b =>
                {
                    b.Property<int>("ChildID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChildID"));

                    b.HasKey("ChildID");

                    b.ToTable("Child");
                });

            modelBuilder.Entity("gateway.DesignSetting", b =>
                {
                    b.Property<int>("SettingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingID"));

                    b.Property<int>("FontSize")
                        .HasColumnType("int");

                    b.Property<string>("ThemeColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingID");

                    b.ToTable("DesignSetting");
                });

            modelBuilder.Entity("gateway.Parent", b =>
                {
                    b.Property<int>("ParentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ParentID"));

                    b.HasKey("ParentID");

                    b.ToTable("Parent");
                });

            modelBuilder.Entity("gateway.Psychologist", b =>
                {
                    b.Property<int>("PsychologistID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PsychologistID"));

                    b.HasKey("PsychologistID");

                    b.ToTable("Psychologist");
                });

            modelBuilder.Entity("gateway.PsychologistBookingRequest", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestID"));

                    b.Property<int>("ChildID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PreferredDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("PreferredTime")
                        .HasColumnType("time");

                    b.Property<int>("PsychologistID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RequestID");

                    b.HasIndex("ChildID");

                    b.HasIndex("ParentID");

                    b.HasIndex("PsychologistID");

                    b.ToTable("PsychologistBookingRequest");
                });

            modelBuilder.Entity("gateway.RequestApproval", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequestID"));

                    b.Property<bool>("ApprovalStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("NotificationSent")
                        .HasColumnType("bit");

                    b.Property<int>("PsychologistID")
                        .HasColumnType("int");

                    b.HasKey("RequestID");

                    b.HasIndex("PsychologistID");

                    b.ToTable("RequestApproval");
                });

            modelBuilder.Entity("gateway.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("gateway.AvailableSlot", b =>
                {
                    b.HasOne("gateway.Psychologist", "Psychologist")
                        .WithMany()
                        .HasForeignKey("PsychologistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Psychologist");
                });

            modelBuilder.Entity("gateway.BookingRequest", b =>
                {
                    b.HasOne("gateway.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gateway.Parent", "Parent")
                        .WithMany("BookingRequests")
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("gateway.PsychologistBookingRequest", b =>
                {
                    b.HasOne("gateway.Child", "Child")
                        .WithMany()
                        .HasForeignKey("ChildID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gateway.Parent", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gateway.Psychologist", "Psychologist")
                        .WithMany("PsychologistBookingRequests")
                        .HasForeignKey("PsychologistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");

                    b.Navigation("Parent");

                    b.Navigation("Psychologist");
                });

            modelBuilder.Entity("gateway.RequestApproval", b =>
                {
                    b.HasOne("gateway.Psychologist", "Psychologist")
                        .WithMany()
                        .HasForeignKey("PsychologistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Psychologist");
                });

            modelBuilder.Entity("gateway.Parent", b =>
                {
                    b.Navigation("BookingRequests");
                });

            modelBuilder.Entity("gateway.Psychologist", b =>
                {
                    b.Navigation("PsychologistBookingRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
